library IEEE;
use IEEE.std_logic_1164.all;

entity registerID_EX is

 generic(N : integer := 32); 

  port(i_CLK          : in std_logic;     -- Clock input
       i_RST          : in std_logic;     -- Reset input
       i_WE           : in std_logic;     -- Write enable input
       i_MemtoReg     : in std_logic; 
       i_MemWrite     : in std_logic; 
       i_ALUOp        : in std_logic; 
       i_ALUSrc       : in std_logic; 
       i_regWrite     : in std_logic; 
       i_JumpLink     : in std_logic; 
       i_RS           : in std_logic_vector(N-1 downto 0);
       i_RT           : in std_logic_vector(N-1 downto 0);
       i_PCplus4      : in std_logic_vector(N-1 downto 0);
       i_SignExtended : in std_logic_vector(N-1 downto 0);
       o_PCplus4      : out std_logic_vector(N-1 downto 0);
       o_Imem         : out std_logic_vector(N-1 downto 0));

end registerID_EX;


architecture behavioral of registerID_EX is

  component nBitRegister is
   generic(N : integer := 32);
     port(i1        : in std_logic_vector(N-1 downto 0);
          clk       : in std_logic;
          rst       : in std_logic;
          w         : in std_logic;
          o         : out std_logic_vector(N-1 downto 0));   
  end component;


begin

    Csignal_MemtoReg: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    

    Csignal_MemWrite: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);    

    Csignal_ALUOp: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    

    Csignal_ALUSrc: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);     

    Csignal_regWrite: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    

    Csignal_JumpLink: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);        

    PCplus4: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);     

    RS: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem); 

    RT: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    

    mux32_jumpLink_data: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);      

   signExtended: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    


  
end behavioral;