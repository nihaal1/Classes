library IEEE;
use IEEE.std_logic_1164.all;

entity registerIF_ID is

 generic(N : integer := 32); 

  port(i_CLK          : in std_logic;     -- Clock input
       i_RST          : in std_logic;     -- Reset input
       i_WE           : in std_logic;     -- Write enable input
       i_Imem         : in std_logic_vector(N-1 downto 0);
       i_PCplus4      : in std_logic_vector(N-1 downto 0);
       o_PCplus4      : out std_logic_vector(N-1 downto 0);
       o_Imem         : out std_logic_vector(N-1 downto 0));

end registerIF_ID;


architecture behavioral of registerIF_ID is

  component nBitRegister is
   generic(N : integer := 32);
     port(i1        : in std_logic_vector(N-1 downto 0);
          clk       : in std_logic;
          rst       : in std_logic;
          w         : in std_logic;
          o         : out std_logic_vector(N-1 downto 0));   
  end component;


begin

    instruction: nBitRegister 
      port map(i1           => i_Imem,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_Imem);    

    PCplus4: nBitRegister 
      port map(i1           => i_PCplus4,
               clk          => i_CLK,
               rst          => i_RST,
               w            => i_WE,
               o            => o_PCplus4);    


end generate registerIF_ID;
  
end behavioral;